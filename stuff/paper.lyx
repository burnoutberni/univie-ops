#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{gnuplottex}
\usepackage{float}
\usepackage{pgfplots}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language naustrian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mehrdimensionale Optimierung ohne Nebenbedingungen
\end_layout

\begin_layout Author
Sonja Biedermann, Felix Freynschlag, Bernhard Hayden,
\begin_inset Newline newline
\end_inset

Stepan Kharin, Christoph Pressler
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Das Nelder-Mead-Verfahren
\end_layout

\begin_layout Subsection
Einführung
\end_layout

\begin_layout Standard
Das Nelder-Mead-Verfahren (auch Downhill-Simplex genannt) verfolgt einen
 geometrischen Ansatz zur iterativen Optimierung: ein Simplex bestehend
 aus 
\begin_inset Formula $N+1$
\end_inset

 Punkten (im Falle 
\begin_inset Formula $N=2$
\end_inset

, dem zweidimensionalen Raum, also ein Dreieck) wird fortwährend so transformier
t, sodass sich der Simplex dem Minimum nähert, um welches er sich dann zusammenz
ieht.
 
\end_layout

\begin_layout Subsection
Funktionsweise
\end_layout

\begin_layout Standard
Der Algorithmus besteht aus drei Phasen, die in jeder Iteration durchlaufen
 werden:
\end_layout

\begin_layout Enumerate
Ordering
\end_layout

\begin_layout Enumerate
Centroid
\end_layout

\begin_layout Enumerate
Transformation
\end_layout

\begin_layout Paragraph
Ordering
\end_layout

\begin_layout Standard
Zu Beginn besitzen wir 
\begin_inset Formula $N+1$
\end_inset

 Punkte, die anhand irgendwelche Kriterien (durchaus auch zufällig) gewählt
 wurden.
 Diese müssen wir nun anhand ihrer Güte ordnen, also sortieren.
 Im Falle des zweidimensionalen Raumes erhalten wir also die drei mnemonisch
 benannten Punkte 
\series bold

\begin_inset Formula $B$
\end_inset

 
\series default
(
\emph on
best
\emph default
), 
\begin_inset Formula $G$
\end_inset

 (
\emph on
good
\emph default
) und 
\begin_inset Formula $W$
\end_inset

 (
\emph on
worst
\emph default
).
 
\begin_inset Formula $B$
\end_inset

 ist im Falle eine Minimierung der Punkt, dessen Funktionswert am geringsten
 ist, 
\begin_inset Formula $G$
\end_inset

 der mit dem zweit geringsten Wert, und so weiter.
\end_layout

\begin_layout Paragraph
Centroid
\end_layout

\begin_layout Standard
Als nächstes berechnen wir den Mittelpunkt der beiden besseren Punkte
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
M=\frac{B+G}{2}
\]

\end_inset

und nehmen diesen als Basis für unsere weiteren Berechnungen.
\end_layout

\begin_layout Paragraph
Transformation
\end_layout

\begin_layout Standard
Nun reflektieren wir den schlechtesten Punkt 
\begin_inset Formula $W$
\end_inset

 am Mittelpunkt
\begin_inset Formula 
\[
R=M+\alpha(M-W)
\]

\end_inset

und prüfen, ob dieser Punkt 
\begin_inset Formula $r$
\end_inset

 die Relation 
\begin_inset Formula $f(B)\leq f(R)\leq f(W)$
\end_inset

 erfüllt.
\end_layout

\begin_layout Standard
Wenn ja, ersetzen wir den schlechtesten Punkt mit 
\begin_inset Formula $R$
\end_inset

 und brechen die jetzige Iteration ab.
 Diesen Vorgang nennt man auch das 
\begin_inset Quotes gld
\end_inset

Akzeptieren
\begin_inset Quotes grd
\end_inset

 eines Punktes.
\end_layout

\begin_layout Standard
Wenn nein, prüfen wir, ob der reflektierte Punkt 
\begin_inset Formula $R$
\end_inset

 besser als unser bisher bester Punkt ist, also ob 
\begin_inset Formula $f(R)<f(B)$
\end_inset

 gilt.
 Wenn dem so ist, expandieren wir den Punkt 
\begin_inset Formula $R$
\end_inset

 testweise weiter:
\begin_inset Formula 
\[
E=M+\gamma(M-W)
\]

\end_inset

und prüfen wiederum, ob dieser Punkt 
\begin_inset Formula $E$
\end_inset

 besser als unser reflektierte Punkt 
\begin_inset Formula $R$
\end_inset

 ist.
 Wenn ja, akzeptieren wir 
\begin_inset Formula $E$
\end_inset

.
 Wenn nein, akzeptieren wir 
\begin_inset Formula $R$
\end_inset

.
\end_layout

\begin_layout Standard
Gilt 
\begin_inset Formula $f(R)\geq f(G)$
\end_inset

, so ist der reflektierte Punkt kein guter Kandidat.
 Wir müssen nun die zwei möglichen kontrahierten Punkte 
\begin_inset Formula $C_{1}$
\end_inset

, 
\begin_inset Formula $C_{2}$
\end_inset

 berechnen.
 Gilt 
\begin_inset Formula $f(R)<f(W)$
\end_inset

, berechnen wir den äußeren kontrahierten Punkt 
\begin_inset Formula $C_{2}$
\end_inset

, ansonsten den inneren kontrahierten Punkt 
\begin_inset Formula $C_{2}.$
\end_inset


\begin_inset Formula 
\begin{eqnarray*}
C_{1} & = & M+\rho(R-M)\\
C_{2} & = & M+\rho(W-M)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Sind die berechneten kontrahierten Punkte besser als die zur Berechnung
 verwendeten Punkte (
\begin_inset Formula $R$
\end_inset

 und 
\begin_inset Formula $W$
\end_inset

 respektive), so werden diese akzeptiert.
 Ist dem nicht so, müssen wir zum nächsten Schritt, der Komprimierung, fortfahre
n.
 Bei der Komprimierung werden jediglich die zwei schlechteren Punkte 
\begin_inset Formula $G$
\end_inset

 und 
\begin_inset Formula $W$
\end_inset

 in Richtung des besten Punktes 
\begin_inset Formula $B$
\end_inset

 gezogen.
\begin_inset Formula 
\begin{eqnarray*}
G & = & B+\sigma(B-G)\\
W & = & B+\sigma(B-W)
\end{eqnarray*}

\end_inset


\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Diese Schritte werden fortgeführt, bis eine Abbruchbedingung eintritt, wie
 etwa dass der Unterschied zwischen dem besten Funktionswert 
\begin_inset Formula $f(B)$
\end_inset

 und dem schlechtesten Funktionswert 
\begin_inset Formula $f(W)$
\end_inset

 ein gegebenes 
\begin_inset Formula $\varepsilon$
\end_inset

 unterschreitet, oder der Umfang des Simplex einen gegebenen Wert unterschreitet.
\end_layout

\begin_layout Subsection
Erläuterung der einzelnen Transformationsschritte
\end_layout

\begin_layout Standard
Folgend werden die einzelnen Transformationsschritte anhand eines Dreiecks
 als Simplex vorgeführt und erläutert.
 Für unsere Koeffizienten wählen wir die Werte 
\begin_inset Formula $\alpha=1,\,\gamma=2,\,\rho=\frac{1}{2},\,\sigma=\frac{1}{2}$
\end_inset

.
 Unser Dreieck 
\begin_inset Formula $\triangle BGW$
\end_inset

 ist definiert mit 
\begin_inset Formula $B=(1,\,3),\,G=(4,\,6),\,W=(6,\,2)$
\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename triangle_bgw.png
	lyxscale 60
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Reflektion
\end_layout

\begin_layout Standard
Wir reflektieren den schlechtesten Punkt an dem Mittelpunkt in die vermeintlich
 bessere Richtung.
\begin_inset Formula 
\[
R=M+M-W=2M-W=\binom{5}{9}-\binom{6}{2}=\binom{-1}{7}
\]

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename triangle_reflect.png
	lyxscale 30
	scale 70

\end_inset


\end_layout

\begin_layout Standard
Dies entspricht dem 
\begin_inset Quotes gld
\end_inset

Heruntertaumeln
\begin_inset Quotes grd
\end_inset

 des Simplex, welches die Optimierung in den ersten Iterationsschritten
 antreibt.
\end_layout

\begin_layout Subsubsection
Expansion
\end_layout

\begin_layout Standard
Nehmen wir an, dass 
\begin_inset Formula $f(R)$
\end_inset

 besser als unser bis jetzt bester Wert ist.
 Wir expandieren also weiter:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
E=M+2(M-W)=\binom{2.5}{4.5}+\binom{-7}{5}=\binom{-4.5}{9.5}
\]

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename triangle_expand.png
	lyxscale 30
	scale 70

\end_inset


\end_layout

\begin_layout Standard
Dies entspricht einem 
\emph on
greedy approach 
\emph default
– dieser Schritt ist nicht notwendig, minimiert aber zusätzlich die Anzahl
 der nötigen Iterationen.
\end_layout

\begin_layout Subsubsection
Kontraktion
\end_layout

\begin_layout Standard
Gehen wir jetzt vom Gegenteil aus – Punkt 
\begin_inset Formula $R$
\end_inset

 war also kein geeigneter Punkt und Punkt 
\begin_inset Formula $E$
\end_inset

 wurde gar nicht berechnet – so müssen wir die beiden Kontraktionspunkte
 
\begin_inset Formula $C_{1}$
\end_inset

, 
\begin_inset Formula $C_{2}$
\end_inset

 berechnen.
\begin_inset Formula 
\begin{eqnarray*}
C_{1} & = & M+\frac{R-M}{2}=\binom{2.5}{4.5}+\frac{\binom{-1}{7}-\binom{2.5}{4.5}}{2}=\binom{-1.75}{1.25}\\
C_{2} & = & M+\frac{W-M}{2}=\binom{2.5}{4.5}+\frac{\binom{6}{2}-\binom{2.5}{4.5}}{2}=\binom{4.25}{1.25}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename triangle_contract.png
	lyxscale 30
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Komprimierung
\end_layout

\begin_layout Standard
Wir komprimieren die Punkte 
\begin_inset Formula $G$
\end_inset

 und 
\begin_inset Formula $W$
\end_inset

 in Richtung 
\begin_inset Formula $B$
\end_inset

.
\begin_inset Formula 
\begin{eqnarray*}
G' & = & B+\frac{G-B}{2}=\binom{1}{3}+\binom{1}{1.5}=\binom{2}{4.5}\\
W' & = & B+\frac{W-B}{2}=\binom{1}{3}+\binom{2.5}{-0.5}=\binom{3.5}{2.5}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename triangle_compress.png
	lyxscale 80
	scale 80

\end_inset


\end_layout

\begin_layout Standard
Dies entspricht dem Zusammenziehen des Simplex' in den letzten Iterationsschritt
en des Algorithmus'.
\end_layout

\begin_layout Subsection
Ein Beispiel: die Himmelblau-Funktion
\end_layout

\begin_layout Standard
\align center

\emph on
\begin_inset Graphics
	filename himmelblau.png
	lyxscale 40
	width 70text%

\end_inset


\end_layout

\begin_layout Standard
Die Himmelblau-Funktion hat 4 gleiche lokale Minima.
 Wir wollen unseren Algorithmus auf sie loslassen, um eines davon zu finden.
 Als zufällige Startpunkte wählen wir 
\begin_inset Formula 
\begin{eqnarray*}
P_{1} & = & (2,\,5)\\
P_{2} & = & (9,\,2)\\
P_{3} & = & (-3,\,-8)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename himmelblau_cont.png
	width 70text%

\end_inset


\end_layout

\begin_layout Standard

\emph on
fehlend
\end_layout

\begin_layout Section
Das Gradientenverfahren
\end_layout

\begin_layout Subsection
Die Idee und der Zweck des Gradientenverfahren
\end_layout

\begin_layout Standard
Grundsätzlich ist das Gradientenverfahren ein Optimierungsverfahren, welches
 das Minimum einer mehrdimensionalen Funktion errechnen.
 Der Gradient 
\begin_inset ERT
status open

\begin_layout Plain Layout

(${
\backslash
nabla}f(x,y)$)
\end_layout

\end_inset

 einer Funktion 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
(f(x)
\backslash
)
\end_layout

\end_inset

 zeigt, aus später gezeigten (HIER VERWEIS EINFÜGEN) Gründen, immer in die
 Richtung des steilsten Anstiegs, folglich zeigt 
\begin_inset ERT
status open

\begin_layout Plain Layout

-${
\backslash
nabla}f(x,y)$
\end_layout

\end_inset

 in die Richtung des stärksten Abstiegs.
 Das Gradientenverfahren macht sich dies zunutze und man "wandert" eine
 gewisse Dauer in diese Richtung, wie "lange" man in die errechnete Richtung
 "wandert" hängt unter anderem auch von der gewählten Methode ab.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H] 
\backslash
centering 
\backslash
begin{tikzpicture} 
\backslash
begin{axis} 
\backslash
addplot3[surf] {x*y^2}; 
\backslash
addplot3[->] coordinates {(-1.5,-0.5,54) (-2.5,-3.5,-70)};  
\backslash
addplot3[only marks] coordinates {(-2,-2,-8)}; 
\backslash
end{axis} 
\backslash
end{tikzpicture} 
\backslash
caption[Gradientenvektor Beispiel] {Hier zu sehen ist -$
\backslash
vec{
\backslash
nabla}f(-2,-2)$ der Funktion $f(x,y)=x*y^2$} 
\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Der Ablauf des Gradientenverfahrens
\end_layout

\begin_layout Enumerate
Es wird ein beliebiger Startpunkt 
\begin_inset ERT
status open

\begin_layout Plain Layout

$P=(x,y)$
\end_layout

\end_inset

 ausgewählt.
\end_layout

\begin_layout Enumerate
Es wird die Ableitung der Funktion 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f(x,y)$
\end_layout

\end_inset

, also 
\begin_inset ERT
status open

\begin_layout Plain Layout

${
\backslash
nabla}f(x)$
\end_layout

\end_inset

 gebildet.
 Sollte dieser Gradient bereits den Wert null haben sind wir bereits fertig
 und haben ein lokales Minimum.
 
\end_layout

\begin_layout Enumerate
Der Punkt 
\begin_inset ERT
status open

\begin_layout Plain Layout

$P$
\end_layout

\end_inset

 wird in den Gradienten eingesetzt und der negative Wert berechnet, also
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$-{
\backslash
nabla}f(x_{P},y_{P})$
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Um eine neuen Punkt 
\begin_inset ERT
status open

\begin_layout Plain Layout

$P^{[n+1]}$
\end_layout

\end_inset

 zu finden stellen wir nun folgende Gleichung auf: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$P^{[n+1]} = P^{[n]} + 
\backslash
alpha_{[n]} * s^{[n]}$
\end_layout

\end_inset

.
 Nun haben wir die Richtung in die optimiert werden muss gefunden (
\begin_inset ERT
status open

\begin_layout Plain Layout

$s^{[n]}$
\end_layout

\end_inset

 (
\begin_inset ERT
status open

\begin_layout Plain Layout

$=-{
\backslash
nabla}f(x_{P},y_{P})$
\end_layout

\end_inset

)), jetzt muss noch entschieden werden wie weit wir in diese Richtung "wandern"
 (
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
alpha^{[n]}$
\end_layout

\end_inset

, liegt zwischen 
\begin_inset ERT
status open

\begin_layout Plain Layout

$0$ und $1$
\end_layout

\end_inset

) (Hinweis: $n$ ist die aktuelle Iteration).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\backslash

\backslash

\end_layout

\end_inset

 Das kann man einerseits mit Hilfe eines fixen Werts machen, andererseits
 auch mit einer Folge (wie z.B 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
frac{1}{
\backslash
sqrt{n}}$
\end_layout

\end_inset

) oder einer jedes mal neu errechneten Schrittweite.
 Zu beachten ist, dass die ausgewählte Folge auf jeden Fall divergent sein
 muss, da man sonst bis zu einer maximalen Entfernung "wandern" kann und
 die Wahrscheinlichkeit groß ist das Optimum nie zu erreichen.
 Sollte man jedes mal einen fixen Wert verliert man zwar den Aufwand für
 die Berechnung der Schrittweite, jedoch ist die Wahrscheinlichkeit hoch,
 dass man viele Iterationen benötigt oder in einer endlosen Schleife festhängt.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\backslash

\backslash

\end_layout

\end_inset

 Es gibt verschieden Arten wie man die Schrittweite berechnen kann, im Folgenden
 werde ich die Schrittweitenbestimmung nach Armijo erklären.
 Dieses Verfahren ist eines der sogenannten "line-search" Verfahren, das
 von mir gezeigte ist jedoch kein exaktes line-search Verfahren sondern
 lediglich eine einfache Heuristik.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\backslash

\backslash

\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Die Armijo-Bedingung:}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
varphi(
\backslash
alpha) 
\backslash
leq 
\backslash
varphi(0) + c * 
\backslash
alpha^{[n]} * 
\backslash
varphi(0)'$
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\backslash

\backslash

\end_layout

\end_inset

 Wobei 
\begin_inset ERT
status open

\begin_layout Plain Layout

$c$
\end_layout

\end_inset

 eine Konstante zwischen null und eins ist und dazu dient das die Bedingung
 nicht zu restriktiv ist, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
varphi(
\backslash
alpha) = f(P^{[n]} + 
\backslash
alpha^{[n]}s^{[n]})$
\end_layout

\end_inset

 und 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
varphi(0)' = {
\backslash
nabla}f(P^{n}) * s^{[n]}$ 
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Für den Anfang wird 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
alpha=1$
\end_layout

\end_inset

 gewählt und errechnet ob die Armijo-Bedingung erfüllt ist - sollte sie
 erfüllt sein haben wir ein passende 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
alpha$
\end_layout

\end_inset

 gefunden, wenn nicht wird 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
alpha$
\end_layout

\end_inset

 mit einem 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
beta$
\end_layout

\end_inset

, welches ebenfalls zwischen null und eins liegt, multipliziert und wieder
 geprüft ob die Ungleichung erfüllt ist.
 (Hinweis: In der Praxis liefern die Werte 
\begin_inset ERT
status open

\begin_layout Plain Layout

$c = 0.01$
\end_layout

\end_inset

 und 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
beta = 0.9$
\end_layout

\end_inset

 häufig gute Ergebnisse.
 (QUELLE: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.unibw.de/lrt1/gerdts/lehre/lpnlp/lp-nlp.pdf"

\end_inset

) 
\end_layout

\begin_layout Enumerate
Wenn man einen neuen Punkt gefunden hat wird bei Punkt 3 fortgesetzt.
 Da es oft einen großen Rechenaufwand erfordert das genaue Minimum zu finden
 wird das Verfahren meist beendet wenn der Gradient einen akzeptablen Wert
 erreicht hat (So kann man als Abbruchbedingung z.B.
 die stärke des Anstiegs in einem Punkt (also den Betrag des Gradienten)
 nehmen).
 
\end_layout

\begin_layout Subsection
Beispiele
\end_layout

\begin_layout Subsubsection
Beispiel 1
\end_layout

\begin_layout Section
Die Koordinatenabstiegsmethode
\end_layout

\begin_layout Subsection
Einführung
\end_layout

\begin_layout Standard
Bei der Koordinatenabstiegsmethode wird bei jedem Schritt eine Koordinate
 i gewählt, nach der man optimiert.
 Es wird bei einem beliebigen Startpunkt begonnen und in jedem Iterationsschritt
 setzt man alle Koordinaten des aktuellen Punktes in die Funktion ein ,
 nur die Koordinate , nach der man minimieren will , behält man als Variable
 bei.
\end_layout

\begin_layout Standard
Es wird immer in Richtung einer Achse minimiert und die Stelle , an der
 das Minimum ist , als neue Koordinate beibehalten und so gelangt man mit
 einer Anzahl an Iterationen zum Minimum der Funktion.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Coordinate_descent.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Wenn zum Beispiel die Funktion 
\begin_inset Formula $f(x,y)=2x^{2}+2xy+1.5y^{2}$
\end_inset

 und der Startpunkt 
\begin_inset Formula $P=(1,\,1)$
\end_inset

 gegeben ist, so muss man, wenn entlang der 
\begin_inset Formula $x$
\end_inset

-Achse minimiert werden soll folgendes eingesetzt werden:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
x & = & 1+1d\\
y & = & 1+0d
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Soll entlang der 
\begin_inset Formula $y$
\end_inset

-Achse optimiert werden, so muss folgendes eingesetzt werden:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
x & = & 1+0d\\
y & = & 1+1d
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Subsection
Beispiel
\end_layout

\begin_layout Standard
Wir möchten die Funktion 
\begin_inset Formula $f(x,y)=2x^{2}+2xy+1.5y^{2}$
\end_inset

 optimieren und wählen den Startpunkt 
\begin_inset Formula $P_{0}=(1,\,1)$
\end_inset

.
 Wir minimieren zuerst entlang der 
\begin_inset Formula $x$
\end_inset

-Achse und setzen ein
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
f(d) & = & 2(1+d)^{2}+2(1+d)+1.5\\
 & = & 2d^{2}+6d+5.5
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Diese soeben erhaltene Funktion müssen wir nun noch minimieren.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
f'(d) & = & 4d+6\\
4d+6 & = & 0\\
d & = & \frac{3}{2}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Setzen wir dies in die Gleichung für die 
\begin_inset Formula $x$
\end_inset

-Koordinate ein und verwenden die alte 
\begin_inset Formula $y$
\end_inset

-Koordinate erhalten wir den neuen Punkt 
\begin_inset Formula $P_{1}=(-\frac{1}{2},\,1)$
\end_inset

.
 Nun minimieren wir nach 
\begin_inset Formula $y$
\end_inset

, wir setzen also ein:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
x & = & -\frac{1}{2}+0d\\
y & = & 1+1d
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
und erhalten
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(d)=1.5d^{2}-d+6
\]

\end_inset


\end_layout

\begin_layout Standard
Dies minimieren wir wiederum und erhalten die neue 
\begin_inset Formula $y$
\end_inset

-Koordinate 
\begin_inset Formula $\frac{1}{3}$
\end_inset

.
 Damit haben wir den neuen Punkt 
\begin_inset Formula $(-\frac{1}{2},\:\frac{1}{3}$
\end_inset

).
 Dieser Vorgang wird wiederholt, bis sich die errechneten Werte nurnoch
 marginal unterscheiden.
 Danach wird abgebrochen.
\end_layout

\begin_layout Subsubsection
Problemfälle
\end_layout

\begin_layout Quotation
Zeigen Sie, dass die Koordinatenabstiegsmethode für die stetige Funktion
\end_layout

\begin_layout Quotation
\begin_inset Formula 
\[
f(x,\,y)=\begin{cases}
(x+y-5)^{2}+(x-y-2)^{2} & falls\,x\le y\\
(x+y-5)^{2}+(x-y+2)^{2} & sonst
\end{cases}
\]

\end_inset

beginnend beim Startpunkt 
\begin_inset Formula $(0,\,0)$
\end_inset

 nicht funktioniert.
\end_layout

\begin_layout Standard
Wir setzen ein:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
x & = & d\\
y & = & 0
\end{eqnarray*}

\end_inset

und erhalten die Funktion
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
f(d) & = & (d-5)^{2}+(d-2)^{2}\\
 & = & 2d^{2}-14d+29
\end{eqnarray*}

\end_inset

welche ein Minimum an der Stelle 
\begin_inset Formula $d=\frac{7}{2}$
\end_inset

.
 Dies fortgesetzt für 
\begin_inset Formula $y$
\end_inset

 erhalten wir den neuen Punkt 
\begin_inset Formula $P=(\frac{7}{2},\,\frac{7}{2})$
\end_inset

.
 Bei weiteren Iterationen merken wir, dass 
\begin_inset Formula $d$
\end_inset

 immer 0 beträgt – was bedeutet, dass sich der Punkt nicht weiterbewegt.
 Wir sitzen auf einem lokalen Minimum fest.
 Führen wir das mit dem anderen Zweig der Funktion ebenfalls durch, so sehen
 wir das gleiche Problem.
\end_layout

\end_body
\end_document
